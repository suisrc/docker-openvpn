#！/bin/bash

bin_home=`dirname $0`
bin_test="$bin_home/../bin/"

if [[ $VPN_TYPE == *-openvpn ]]; then
    echo "starting $VPN_TYPE..."
#     # <remote-proto>, <remote-ip>, <remote-port>
#     cp -f $bin_home/client.ovpn /vpn/openvpn.conf
#     if [[ -n $VPN_REGION ]]; then
#         IFS=' ' read -r endpoint secret location <<< "$(bash $bin_home/tool $VPN_REGION)"
#         IFS='/' read -r port proto <<< "${VPN_PORT:-1194/UDP}"
#         echo "region: $VPN_REGION, endpoint: $endpoint, port: $port, proto: $proto, location: $location"
#         sed -i -e "s|<remote-ip>|$endpoint|" -e "s|<remote-port>|$port|" -e "s|<remote-proto>|$proto|" /vpn/openvpn.conf
#     fi
    VPN_TYPE=openvpn exec ${bin_test}vpn-entry # openvpn
elif [[ $VPN_TYPE == *-wireguard ]]; then
    echo "starting $VPN_TYPE..."
#     if [[ -n $VPN_REGION ]]; then
#         IFS=' ' read -r endpoint secret location <<< "$(bash $bin_home/tool $VPN_REGION)"
#         port=${VPN_PORT:-51820} # only udp
#         echo "region: $VPN_REGION, endpoint: $endpoint, port: $port, location: $location"
#         if [[ -z $WG_ADDRESS_KEY ]]; then export WG_ADDRESS_KEY="10.14.0.2/16" fi
#         if [[ -z $WG_PEER_PUBLIC_KEY ]]; then export WG_PEER_PUBLIC_KEY="$secret" fi
#         if [[ -z $WG_PEER_ENDPOINT ]]; then export WG_PEER_ENDPOINT="$endpoint:$port" fi
#     fi
    VPN_TYPE=wireguard exec ${bin_test}vpn-entry # wireguard
fi

echo "unknown vpn: $VPN_TYPE"
sleep 5 # 防止循环重启， 无法查看日志
