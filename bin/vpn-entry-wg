#!/bin/bash

# ENV SOCKS5="off" \ 
#     VPN_KEY=a01 \
#     VPN_REGION= \
#     SKIPPED_IPS= \
#     WG_PRIVATE_KEY= \
#     WG_ADDRESS_KEY= \
#     WG_ADDRESS_DNS="1.1.1.1,8.8.8.8"\
#     WG_ADDRESS_MTU= \
#     WG_PEER_ENDPOINT= \
#     WG_PEER_PUBLIC_KEY= \
#     WG_PEER_ALLOWED_IPS="0.0.0.0/0"\
#     WG_PEER_KEEPALIVE= \
#     WG_CONF_PATH= \
#     WG_CONF_SHELL= \
#     WG_CONF_SHEND= \
#     SUCC_SHELL= \
#     EXIT_SHELL= \
#     HEALTH_SHELL= \
#     HEALTH_URI= \
#     TESTIP_URI=

set -o errexit
set -o nounset
set -o pipefail

# 执行配置脚本，在启动前执行
if [[ -n "$WG_CONF_SHELL" ]]; then
    echo "create openvpn conf by shell: $WG_CONF_SHELL"
    eval "$WG_CONF_SHELL"
fi
# 通过网络获取私钥
if  [[ $WG_PRIVATE_KEY =~ ^http(s)?://  ]]; then
    echo "get wireguard private key form internet..."
    export WG_PRIVATE_KEY=$(curl -ksSL "$WG_PRIVATE_KEY")
fi
# if file is prefix http, download it.
if [[ $WG_CONF_PATH =~ ^http(s)?:// ]]; then
    echo "downloading wireguard conf file: $WG_CONF_PATH"
    curl -ksSL "$WG_CONF_PATH" -o /vpn/wireguard.conf
    WG_CONF_PATH=/vpn/wireguard.conf
fi
if [[ -z "$WG_CONF_PATH" ]]; then
    WG_CONF_PATH=/vpn/wireguard.conf
fi
# 如果 WG_CONF_PATH 不存在，通过环境变量创建
if [[ ! -f "$WG_CONF_PATH" ]]; then
    if [[ -z "$WG_PRIVATE_KEY" ]]; then
        echo "missing wireguard private key"
        exit 1
    fi
    if [[ -z "$WG_ADDRESS_KEY" ]]; then
        echo "missing wireguard address key"
        exit 1
    fi
    if [[ -z "$WG_PEER_PUBLIC_KEY" ]]; then
        echo "missing wireguard peer public key"
        exit 1
    fi
    if [[ -z "$WG_PEER_ENDPOINT" ]]; then
        echo "missing wireguard peer endpoint"
        exit 1
    fi
    # write interface
    cat <<EOF > "$WG_CONF_PATH"
[Interface]
PrivateKey = $WG_PRIVATE_KEY
Address = $WG_ADDRESS_KEY
DNS = $WG_ADDRESS_DNS

EOF
    if [[ -n "$WG_ADDRESS_MTU" ]]; then
        echo "MTU = $WG_ADDRESS_MTU" >> "$WG_CONF_PATH"
    fi
    # write peer
    cat <<EOF >> "$WG_CONF_PATH"

[Peer]
PublicKey = $WG_PEER_PUBLIC_KEY
AllowedIPs = $WG_PEER_ALLOWED_IPS
Endpoint = $WG_PEER_ENDPOINT

EOF
    if [[ -n "$WG_PEER_KEEPALIVE" ]]; then
        echo "PersistentKeepalive = $WG_PEER_KEEPALIVE" >> "$WG_CONF_PATH"
    fi
    # write end
    WG_CONF_PATH=$WG_CONF_PATH
fi
# echo "test success: $WG_CONF_PATH" && exit 0
ln -sf "$WG_CONF_PATH" /etc/wireguard/wg0.conf

if [[ -n "$WG_CONF_SHEND" ]]; then
    echo "fix wireguard conf shell: $WG_CONF_SHEND"
    eval "$WG_CONF_SHEND"
fi

# 处理 SKIPPED_IPS
if [[ -n "$SKIPPED_IPS" ]]; then
    echo "using wireguard skip ips: $SKIPPED_IPS"
    default_gw=$(ip route show | grep via | head -n 1 | awk '{print $3}')
    IFS=',' read -ra skip_ips <<< "$SKIPPED_IPS"
    for skip_ip in "${skip_ips[@]}"; do
        echo "[+] ip route add $skip_ip via $default_gw"
        ip route add $skip_ip via $default_gw
    done
fi

echo "using wireguard conf file: $WG_CONF_PATH"

wg-quick up wg0
if [[ ! -e /sys/class/net/wg0 ]]; then
    echo "wg0 not found, wireguard start failed."
    exit 1
fi

# 显示连接状况
sleep 1 && wg show
echo "" && echo "wg0 is installed"

# trap 'vpn-stop' TERM
# wait /sys/class/net/wg0
#=========================================================
# 脚本启动成功后执行的内容
vpn-poststart wireguard
# 等待进程完成
vpn-wait
